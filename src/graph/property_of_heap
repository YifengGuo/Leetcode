Heap: PriorityQueue in Java
      is an unsorted array but have special rules to follow
      
      Heap is implemented by constructing binary heap.
      
Properties of heap(binary heap):
	1. Any node is smaller (or greater) than all of its descendants.
	   The smallest (or greatest) element is always at root
	2. Heap is always a complete tree
	3. maxheap and minHeap
	4. assume index of parent is x then: 
       index of left_child = 2 * x + 1
       index of right_child = 2 * x + 2
    5. unsorted but follow rules above
    
Supported operations:
	insert/offer(E e): O(log(n))
	update(int index, E e): O(log(n))
	get/top(): O(1)
	pop(): O(log(n))
	heapify(int[] array): O(n)
	
	
For encapsulation, Java or C++ does not emerge any API 
that can help us change element which is not at top.
However, if we do want to implement this feature, we can use
a hash_map which maintains the mapping of element and its index
in array of heap. <key:element, value: index of array>. So whenever
we percolate elements in heap, we change its value in hash_map.


What if we want to delete an element that is not the top element of heap?
                        7
                       / \
                      X   2
                     / \  /
                    5  4  6
       
1. Eager Deletion: 
                  We must perform this action right after the command is received
                   e.g: classical way to delete x in the heap. We put 6 at
                        place x and to see if 6 is greater than x or less than
                        x and determine to percolate up or percolate down.


2. Lazy Deletion:
	            We can use another hash_set<element> to buffer all the nodes that are
	            currently NOT the top element but need to be deleted
	            Whenever we want to do top/pop(), we have to check against the hash_set
	            to see whether the current top element is in the hash_set or not
	            case1: not in the hash_set, the top element is valid, do normal operation
	            case2: is in the hash_set, we keep popping this pop element until the top 
	                   element is no in the hash_set
		